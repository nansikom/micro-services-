
const express = require("express");
const answers = require("./answer.json");
const app = express();
app.use(express.json());
app.use(express.static("public"));
const cors = require("cors");
app.use(cors());




// app.get("/api/geography" , (req, res) =>{
//    // search for an existing category
//    const category = "geography";
//    //check if there questions fro, that category.this is directly checking if there are questions from the answer.json file.
//    const questionstochoosefrom = answers[category];
//     console.log('Category:', category);
//    console.log('Questions:', questionstochoosefrom);
//    // ...
//    // if none are found.
//    if(!questionstochoosefrom){ 
//       return res.status(404).send("Category not found");
//    }
//    // returns an array of question Ids by getting of the keys and putting them in an array.
//    const questionIds = Object.keys(questionstochoosefrom);
//    // picks a  randomquestion Id from the questionsID array
//    const randomQuestionId = questionIds[Math.floor(Math.random() * questionIds.length)];
//    // get the corresponding question from the assiigned Id.
//    const randomQuestion = questionstochoosefrom[randomQuestionId];
//    res.json(randomQuestion);
// });
app.get("/api/:category" , (req, res) =>{
   // search for an existing category
   const category = req.params.category;
   //check if there questions fro, that category.this is directly checking if there are questions from the answer.json file.
   const questionstochoosefrom = answers[category];
    console.log('Category:', category);
   console.log('Questions:', questionstochoosefrom);
   // ...
   // if none are found.
   if(!questionstochoosefrom){ 
      return res.status(404).send("Category not found");
   }
   // returns an array of question Ids by getting of the keys and putting them in an array.
   const questionIds = Object.keys(questionstochoosefrom);
   // picks a  randomquestion Id from the questionsID array
   const randomQuestionId = questionIds[Math.floor(Math.random() * questionIds.length)];
   // get the corresponding question from the assiigned Id.
   const randomQuestion = questionstochoosefrom[randomQuestionId];
   const response = {
      questionID: randomQuestionId,
      question: randomQuestion.question,
      answers: randomQuestion.answers,
   };
   res.json(response);
});



app.get("/api/:category/:questionID/answer" , (req, res) =>{
   // search for an existing category
   const category = req.params.category;
   const questionID = req.params.questionID;
   //check if there questions fro, that category.this is directly checking if there are questions from the answer.json file.
   const questionstochoosefrom = answers[category];
   
   // if none are found.
   if(!questionstochoosefrom){ 
      return res.status(404).send("Category not found");
   }
   // returns an array of question Ids by getting of the keys and putting them in an array.
   
   // picks a  randomquestion Id from the questionsID array
   const questionObj = questionstochoosefrom[questionID];
   if(!questionObj)
   return res.status(404).send("Question ID not found");
   const answer= questionObj.answer;
   res.json({answer});
   
   });
// app.get("/api/music" , (req, res) =>{
//    // search for an existing category
//    const category = "music";
//    //check if there questions fro, that category.this is directly checking if there are questions from the answer.json file.
//    const questionstochoosefrom = answers[category];
//     console.log('Category:', category);
//    console.log('Questions:', questionstochoosefrom);
//    // ...
//    // if none are found.
//    if(!questionstochoosefrom){ 
//       return res.status(404).send("Category not found");
//    }
//    // returns an array of question Ids by getting of the keys and putting them in an array.
//    const questionIds = Object.keys(questionstochoosefrom);
//    // picks a  randomquestion Id from the questionsID array
//    const randomQuestionId = questionIds[Math.floor(Math.random() * questionIds.length)];
//    // get the corresponding question from the assiigned Id.
//    const randomQuestion = questionstochoosefrom[randomQuestionId];
//    res.json(randomQuestion);
// });
// app.get("/api/history" , (req, res) =>{
//    // search for an existing category
//    const category = "history";
//    //check if there questions fro, that category.this is directly checking if there are questions from the answer.json file.
//    const questionstochoosefrom = answers[category];
//    // if none are found.
//    if(!questionstochoosefrom){ 
//       return res.status(404).send("Category not found");
//    }
//    // returns an array of question Ids by getting of the keys and putting them in an array.
//    const questionIds = Object.keys(questionstochoosefrom);
//    // picks a  randomquestion Id from the questionsID array
//    const randomQuestionId = questionIds[Math.floor(Math.random() * questionIds.length)];
//    // get the corresponding question from the assiigned Id.
//    const randomQuestion = questionstochoosefrom[randomQuestionId];
//    res.json(randomQuestion);
// });


// app.get("/api/movies" , (req, res) =>{
//    // search for an existing category
//    const category = "movies";
//    //check if there questions fro, that category.this is directly checking if there are questions from the answer.json file.
//    const questionstochoosefrom = answers[category];
//    // if none are found.
//    if(!questionstochoosefrom){ 
//       return res.status(404).send("Category not found");
//    }
//    // returns an array of question Ids by getting of the keys and putting them in an array.
//    const questionIds = Object.keys(questionstochoosefrom);
//    // picks a  randomquestion Id from the questionsID array
//    const randomQuestionId = questionIds[Math.floor(Math.random() * questionIds.length)];
//    // get the corresponding question from the assiigned Id.
//    const randomQuestion = questionstochoosefrom[randomQuestionId];
//    res.json(randomQuestion);
// });

 




app.listen(3000,function(){
   console.log("were listening on 3000")
});
